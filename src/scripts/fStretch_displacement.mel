global proc fStretch_displacement(string $value)
{
    switch ($value)
    {

    case "ui":
         /* fStretch displacement network window */

	if (`window -exists fStretch_displacement`) {
		deleteUI fStretch_displacement;
    }
    window -title "fStretch - Create Displacement Network" -mxb 0 -rtf 1 -s 0 fStretch_displacement;
    columnLayout;
    text -label "";
    string $about = `about -v`; string $mayaVersion[];
    tokenizeList($about, $mayaVersion);
    int $mayaYear = $mayaVersion[0];
    if (($mayaYear < 2011) && (`about -li`)) 
    {
        rowLayout -nc 5 -cw5 10 100 90 225 240 -ct5 "both" "both" "both" "both" "left"; 
    } else {
        rowLayout -nc 5 -cw5 10 95 85 196 230 -ct5 "both" "both" "both" "both" "left"; 
    }
    text " ";
    checkBox -label "Tension Based" -v 1 -cc ("fStretch_displacement tensionBased") fStretch_disp_tensionBased;
    checkBox -label "Angle Based" -v 0 -cc ("fStretch_displacement angleBased") fStretch_disp_angleBased;
    checkBox -label "Attach Pre/Post render MEL scripts" -v 1 -cc ("fStretch_displacement attachPrePost") fStretch_disp_melScripts;
    checkBox -label "Append existing Pre/Post render MEL scripts" -v 1 fStretch_disp_overwriteMelScripts;
    setParent..;
    text " ";
if (($mayaYear < 2011) && (`about -li`)) { rowLayout -nc 3 -cw3 10 200 490 -ct3 "left" "both" "both"; } else {
			rowLayout -nc 3 -cw3 10 175 450 -ct3 "left" "both" "both"; }
                text -label "";
if (($mayaYear < 2011) && (`about -li`)) { rowLayout -nc 3 -cw3 45 115 35 -ct3 "left" "both" "both"; } else {
				rowLayout -nc 3 -cw3 40 90 35 -ct3 "left" "both" "both"; }
                    text "Mesh :";
                    textField -text "" -cc ("fStretch_displacement meshChange") fStretch_disp_mesh;
                    button -l "Pick" -c ("fStretch_displacement meshPick") fStretch_disp_meshPick;
                setParent..;
if (($mayaYear < 2011) && (`about -li`)) { rowLayout -nc 6 -cw6 85 115 35 105 115 35 -ct6 "both" "both" "both" "right" "both" "both"; } else {
				rowLayout -nc 6 -cw6 85 90 35 95 90 35 -ct6 "both" "both" "both" "right" "both" "both"; }

                    text "fStretch Node :";
                    textField -text "" fStretch_disp_node;
                    button -l "Pick" -c ("fStretch_displacement nodePick") fStretch_disp_nodePick;
                    text "Shading Group : ";
                    textField -text "" fStretch_disp_shadingGroup;
                    button -l "Pick" -c ("fStretch_displacement shadingGroupPick") fStretch_disp_shadingGroupPick;
                setParent..;
            setParent..;
            text -label "";
if (($mayaYear < 2011) && (`about -li`)) { rowLayout -nc 2 -cw2 10 690 -ct2 "both" "both"; } else {
			rowLayout -nc 2 -cw2 10 620 -ct2 "both" "both"; }
            text -label "";
            frameLayout -label "Displacement Maps" -borderStyle "in";
columnLayout;
if (($mayaYear < 2011) && (`about -li`)) { rowLayout -nc 3 -cw3 75 555 50 -ct3 "left" "both" "both"; } else {
				rowLayout -nc 3 -cw3 60 500 50 -ct3 "left" "both" "both"; }
        			text -l "  Neutral :" fStretch_disp_neutral;
        			textField -text "" fStretch_disp_neutralFile;
        			button -l "Browse" -c ("fStretch_displacement neutralBrowse") fStretch_disp_neutralBrowse;
    			setParent..;
if (($mayaYear < 2011) && (`about -li`)) { rowLayout -nc 3 -cw3 75 555 50 -ct3 "left" "both" "both"; } else {
				rowLayout -nc 3 -cw3 60 500 50 -ct3 "left" "both" "both"; }
        			text -l "  Stretch :" fStretch_disp_stretch;
        			textField -text "" fStretch_disp_stretchFile;
        			button -l "Browse" -c ("fStretch_displacement stretchBrowse") fStretch_disp_stretchBrowse;
    			setParent..;
if (($mayaYear < 2011) && (`about -li`)) { rowLayout -nc 3 -cw3 75 555 50 -ct3 "left" "both" "both"; } else {
				rowLayout -nc 3 -cw3 60 500 50 -ct3 "left" "both" "both"; }
        			text -l "  Squash :" fStretch_disp_squash;
        			textField -text "" fStretch_disp_squashFile;
        			button -l "Browse" -c ("fStretch_displacement squashBrowse") fStretch_disp_squashBrowse;
    			setParent..;
if (($mayaYear < 2011) && (`about -li`)) { rowLayout -nc 3 -cw3 75 555 50 -ct3 "left" "both" "both"; } else {
				rowLayout -nc 3 -cw3 60 500 50 -ct3 "left" "both" "both"; }
        			text -en 0 -l "  Bend In :" fStretch_disp_bendIn;
        			textField -en 0 -text "" fStretch_disp_bendInFile;
        			button -en 0 -l "Browse" -c ("fStretch_displacement bendInBrowse") fStretch_disp_bendInBrowse;
    			setParent..;
if (($mayaYear < 2011) && (`about -li`)) { rowLayout -nc 3 -cw3 75 555 50 -ct3 "left" "both" "both"; } else {
				rowLayout -nc 3 -cw3 60 500 50 -ct3 "left" "both" "both"; }
        			text -en 0 -l "  Bend Out :" fStretch_disp_bendOut;
        			textField -en 0 -text "" fStretch_disp_bendOutFile;
        			button -en 0 -l "Browse" -c ("fStretch_displacement bendOutBrowse") fStretch_disp_bendOutBrowse;
    			setParent..;
setParent..;
            setParent..;
        setParent..;

        text -label "";
if (($mayaYear < 2011) && (`about -li`)) { rowLayout -nc 2 -cw2 10 690 -ct2 "both" "both"; } else {
		rowLayout -nc 2 -cw2 10 620 -ct2 "both" "both"; }
            text -label "";
            frameLayout -label "Pre/Post render MEL scripts" -borderStyle "in" fStretch_disp_PrePostLayout;
columnLayout;
                text -label "" -h 5;
if (($mayaYear < 2011) && (`about -li`)) { rowColumnLayout -numberOfColumns 2 -columnWidth 1 430 -columnWidth 2 300; } else {
                rowColumnLayout -numberOfColumns 2
        			-columnWidth 1 340
					-columnWidth 2 300; }

if (($mayaYear < 2011) && (`about -li`)) { rowColumnLayout -numberOfColumns 2 -columnWidth 1 215 -columnWidth 2 220; } else {
            		rowColumnLayout -numberOfColumns 2
            			-columnWidth 1 170
						-columnWidth 2 200; }
                    optionMenu -label "   Export value:  " fStretch_disp_exportValue;
            			menuItem -label "Luminance";
            			menuItem -label "Alpha";
            			menuItem -label "RGB";
            			menuItem -label "RGBA";

            		optionMenu -label "   Image format: " fStretch_disp_imageFormat;
            			menuItem -label "Gif";
            			menuItem -label "SoftImage";
            			menuItem -label "RLA";
            			menuItem -label "TIFF";
            			menuItem -label "SGI";
            			menuItem -label "Alias";
            			menuItem -label "IFF";
            			menuItem -label "JPEG";
            			menuItem -label "EPS";

            		setParent..;
if (($mayaYear < 2011) && (`about -li`)) { rowLayout -nc 4 -cw4 75 40 85 40 -ct4 "both" "both" "right" "both"; } else {
				rowLayout -nc 4 -cw4 75 60 65 60 -ct4 "both" "both" "right" "both"; }
            			text -l "Map Size X:" fStretch_disp_mapSizeXText;
            			intField -value 512 fStretch_disp_mapSizeX;
            			text -l "Map Size Y: " fStretch_disp_mapSizeYText;
            			intField -value 512 fStretch_disp_mapSizeY;
        			setParent..;
    			setParent..;
if (($mayaYear < 2011) && (`about -li`)) { rowLayout -nc 2 -cw2 385 350 -ct2 "both" "both"; } else {
				rowLayout -nc 2 -cw2 350 300 -ct2 "both" "both"; }
if (($mayaYear < 2011) && (`about -li`)) { rowLayout -nc 4 -cw4 120 75 110 75 -ct4 "both" "both" "both" "both"; } else {
				rowLayout -nc 4 -cw4 100 75 90 75 -ct4 "both" "both" "both" "both"; }
        			text -l "   Tension file name:" fStretch_disp_tensionFileNameText;
        			textField -text "tension" fStretch_disp_tensionFileName;
        			text -en 0 -l "   Angle file name:" fStretch_disp_angleFileNameText;
        			textField -en 0 -text "angle" fStretch_disp_angleFileName;
        		setParent..;
if (($mayaYear < 2011) && (`about -li`)) { rowLayout -nc 3 -cw3 55 30 205 -ct3 "both" "both" "right"; } else {
				rowLayout -nc 3 -cw3 55 25 170 -ct3 "both" "both" "right"; }
            		text -l "Padding:";
            		intField -v 4 fStretch_disp_padding;
            		checkBox -l "Delete files after the render" -v 1 fStretch_disp_deleteFiles;
                setParent..;
                setParent..;
if (($mayaYear < 2011) && (`about -li`)) { rowLayout -nc 3 -cw3 50 573 50 -ct3 "both" "both" "both"; } else {
				rowLayout -nc 3 -cw3 40 513 50 -ct3 "both" "both" "both"; }
        			text -l "   Path:" fStretch_disp_pathText;
        			textField -text (`internalVar -userTmpDir`) fStretch_disp_filePath;
        			button -l "Browse" -c ("fStretch_displacement pathBrowse") fStretch_disp_pathBrowse;
        		setParent..;
			text -label "" -h 5;
            setParent..;
setParent..;
        setParent..;

        text -label "";
if (($mayaYear < 2011) && (`about -li`)) { rowColumnLayout -numberOfColumns 3 -columnWidth 1 10 -columnWidth 2 690 -columnWidth 3 5; } else {
		rowColumnLayout -numberOfColumns 3
			-columnWidth 1 10
			-columnWidth 2 625
			-columnWidth 3 5; }
			text -label "";
if (($mayaYear < 2011) && (`about -li`)) { button -w 590 -h 30 -align "center" -c ("fStretch_displacement createDisp") "Create Displacement Network"; } else {
			button -w 530 -h 30 -align "center" -c ("fStretch_displacement createDisp") "Create Displacement Network"; }
			text -label "";
		setParent..;
		text -label "" -h 10;

	showWindow fStretch_displacement;
if (($mayaYear < 2011) && (`about -li`)) { window -edit -widthHeight 710 435 -s 0 fStretch_displacement; }
    optionMenu -e -sl 4 fStretch_disp_exportValue;
    optionMenu -e -sl 8 fStretch_disp_imageFormat;
	checkBox -e -v 0 fStretch_disp_melScripts;
	fStretch_displacement attachPrePost;

    break;;

    case "shadingGroupPick":
        string $SG[]; clear $SG;
        string $sel[] = `ls -sl`;
        if ($sel[0] != ""){
            if (`nodeType $sel[0]` == "shadingEngine") { $SG[0] = $sel[0]; }
            else {
              	string $shapes[] = listRelatives("-f","-shapes", "-type", "mesh");

              	for ($shape in $shapes) {
              	    $SG = stringArrayCatenate($SG,`listSets -type 1 -object ($shape + ".f[*]")`);
              	}
            }
            textField -e -text $SG[0] fStretch_disp_shadingGroup;
        }
    break;

    case "neutralBrowse":
		string $result[];
string $about = `about -v`; string $mayaVersion[]; tokenizeList($about, $mayaVersion); int $mayaYear = $mayaVersion[0];
if ($mayaYear < 2011){ $result[0] = `fileDialog -m 0`; } else {
        $result = `fileDialog2 -okCaption "Select File" -fm 1 -dialogStyle 2`;
}
        textField -e -text $result[0] fStretch_disp_neutralFile;
    break;

    case "stretchBrowse":
		string $result[];
string $about = `about -v`; string $mayaVersion[]; tokenizeList($about, $mayaVersion); int $mayaYear = $mayaVersion[0];
if ($mayaYear < 2011){ $result[0] = `fileDialog -m 0`; } else {
        $result = `fileDialog2 -okCaption "Select File" -fm 1 -dialogStyle 2`;
}
        textField -e -text $result[0] fStretch_disp_stretchFile;
    break;

    case "squashBrowse":
		string $result[];
string $about = `about -v`; string $mayaVersion[]; tokenizeList($about, $mayaVersion); int $mayaYear = $mayaVersion[0];
if ($mayaYear < 2011){ $result[0] = `fileDialog -m 0`; } else {
        $result = `fileDialog2 -okCaption "Select File" -fm 1 -dialogStyle 2`;
}
        textField -e -text $result[0] fStretch_disp_squashFile;
    break;

    case "bendInBrowse":
		string $result[];
string $about = `about -v`; string $mayaVersion[]; tokenizeList($about, $mayaVersion); int $mayaYear = $mayaVersion[0];
if ($mayaYear < 2011){ $result[0] = `fileDialog -m 0`; } else {
        $result = `fileDialog2 -okCaption "Select File" -fm 1 -dialogStyle 2`;
}
        textField -e -text $result[0] fStretch_disp_bendInFile;
    break;

    case "bendOutBrowse":
		string $result[];
string $about = `about -v`; string $mayaVersion[]; tokenizeList($about, $mayaVersion); int $mayaYear = $mayaVersion[0];
if ($mayaYear < 2011){ $result[0] = `fileDialog -m 0`; } else {
        $result = `fileDialog2 -okCaption "Select File" -fm 1 -dialogStyle 2`;
}
        textField -e -text $result[0] fStretch_disp_bendOutFile;
    break;

    case "pathBrowse":
		string $result[];
string $about = `about -v`; string $mayaVersion[]; tokenizeList($about, $mayaVersion); int $mayaYear = $mayaVersion[0];
if ($mayaYear < 2011){
global string $fStretch_browse_dir;
fileBrowser "fStretch_browse_dir" "Choose Directory" "directory" 4; $result[0] = $fStretch_browse_dir;
textField -e -text ($result[0]) fStretch_disp_filePath;
} else {
        string $result[] = `fileDialog2 -okCaption "Select Folder" -fm 3 -dialogStyle 2`;
        textField -e -text ($result[0] + "/") fStretch_disp_filePath;
}
    break;

    case "tensionBased":
        int $v = `checkBox -q -v fStretch_disp_tensionBased`;
        text -e -en $v fStretch_disp_stretch;
        textField -e -en $v fStretch_disp_stretchFile;
        button -e -en $v fStretch_disp_stretchBrowse;
        text -e -en $v fStretch_disp_squash;
        textField -e -en $v fStretch_disp_squashFile;
        button -e -en $v fStretch_disp_squashBrowse;
        text -e -en $v fStretch_disp_tensionFileNameText;
        textField -e -en $v fStretch_disp_tensionFileName;
        if (!`checkBox -q -v fStretch_disp_tensionBased` && !`checkBox -q -v fStretch_disp_angleBased`){
            checkBox -e -v 1 fStretch_disp_angleBased; fStretch_displacement angleBased;
        }
    break;

    case "angleBased":
        int $v = `checkBox -q -v fStretch_disp_angleBased`;
        text -e -en $v fStretch_disp_bendIn;
        textField -e -en $v fStretch_disp_bendInFile;
        button -e -en $v fStretch_disp_bendInBrowse;
        text -e -en $v fStretch_disp_bendOut;
        textField -e -en $v fStretch_disp_bendOutFile;
        button -e -en $v fStretch_disp_bendOutBrowse;
        text -e -en $v fStretch_disp_angleFileNameText;
        textField -e -en $v fStretch_disp_angleFileName;
        if (!`checkBox -q -v fStretch_disp_angleBased` && !`checkBox -q -v fStretch_disp_tensionBased`){
            checkBox -e -v 1 fStretch_disp_tensionBased; fStretch_displacement tensionBased;
        }
    break;

    case "nodePick":
        string $sel[] = `ls -sl`;
        if ($sel[0] != ""){
            string $history[] = `listHistory -pruneDagObjects true -interestLevel 0 $sel[0]`;
            for ($each in $history){
                if (`nodeType $each` == "fStretch"){
                    textField -e -text $each fStretch_disp_node;
                }
            }
        }
    break;

    case "meshPick":
        string $sel[] = `ls -sl`;
        if ($sel[0] != ""){
            textField -e -text `ls -sl` fStretch_disp_mesh;
            fStretch_displacement meshChange;
            fStretch_displacement nodePick;
            fStretch_displacement shadingGroupPick;
        }
    break;

    case "meshChange":
        textField -e -text (`textField -q -text fStretch_disp_mesh` + "_tension") fStretch_disp_tensionFileName;
        textField -e -text (`textField -q -text fStretch_disp_mesh` + "_angle") fStretch_disp_angleFileName;
    break;

    case "attachPrePost":
        checkBox -e -en `checkBox -q -v fStretch_disp_melScripts` fStretch_disp_overwriteMelScripts;
        frameLayout -e -en `checkBox -q -v fStretch_disp_melScripts` fStretch_disp_PrePostLayout;
    break;

    case "createDisp":

        int $incompleteWindow = 0;

        if (`checkBox -q -v fStretch_disp_tensionBased`){
            if (`textField -q -text fStretch_disp_stretchFile` == ""){ $incompleteWindow = 1; }
            if (`textField -q -text fStretch_disp_squashFile` == ""){ $incompleteWindow = 1; }
            if (`checkBox -q -v fStretch_disp_melScripts`){ if (`textField -q -text fStretch_disp_tensionFileName` == ""){ $incompleteWindow = 1; } }
        }
        if (`checkBox -q -v fStretch_disp_angleBased`){
            if (`textField -q -text fStretch_disp_bendInFile` == ""){ $incompleteWindow = 1; }
            if (`textField -q -text fStretch_disp_bendOutFile` == ""){ $incompleteWindow = 1; }
            if (`checkBox -q -v fStretch_disp_melScripts`){ if (`textField -q -text fStretch_disp_angleFileName` == ""){ $incompleteWindow = 1; } }
        }
        if (`textField -q -text fStretch_disp_mesh` == ""){ $incompleteWindow = 1; }
        if (`textField -q -text fStretch_disp_node` == ""){ $incompleteWindow = 1; }
        if (`textField -q -text fStretch_disp_shadingGroup` == ""){ $incompleteWindow = 1; }
        if (`textField -q -text fStretch_disp_neutralFile` == ""){ $incompleteWindow = 1; }

        if (`checkBox -q -v fStretch_disp_melScripts`){
            if (`intField -q -v fStretch_disp_mapSizeX` <= 0){ $incompleteWindow = 1; }
            if (`intField -q -v fStretch_disp_mapSizeY` <= 0){ $incompleteWindow = 1; }
            if (`intField -q -v fStretch_disp_padding` <= 0){ $incompleteWindow = 1; }
            if (`textField -q -text fStretch_disp_filePath` == ""){ $incompleteWindow = 1; }
        }

        if ($incompleteWindow){
            confirmDialog -t "fStretch - Incomplete fields" -m "Please make sure to fill all the fields needed.      " -ma "center" -b "Ok";
            error("nfStretch: Please make sure to fill all the needed fields.");
        };

        string $name = `textField -q -text fStretch_disp_node`;
        string $tensionFile;
        string $neutralDispFile;
        string $stretchDispFile;
        string $squashDispFile;
        string $bendInDispFile;
        string $bendOutDispFile;
        string $angleFile;

        string $stretchRemap;
        string $squashRemap;
        string $bendInRemap;
        string $bendOutRemap;

        string $stretchContrast;
        string $squashContrast;
        string $bendInContrast;
        string $bendOutContrast;

string $blendColors[]; clear $blendColors;

        string $plusMinusAverage1;
        string $plusMinusAverage2;

        string $displacementNode;

        string $misc[]; clear $misc;

if ((`checkBox -q -v fStretch_disp_tensionBased`) && (`checkBox -q -v fStretch_disp_angleBased`)){
            /* TENSION & ANGLE DISPLACEMENT */

            /* Create file nodes */
            int $i;
            for ($i=0; $i<=6; $i++){
                string $fileName;
                if ($i == 0){ $fileName = "tension"; }
                if ($i == 1){ $fileName = "neutralDisp"; }
                if ($i == 2){ $fileName = "stretchDisp"; }
                if ($i == 3){ $fileName = "squashDisp"; }
                if ($i == 4){ $fileName = "bendInDisp"; }
                if ($i == 5){ $fileName = "bendOutDisp"; }
                if ($i == 6){ $fileName = "angle"; }
                string $file = `shadingNode -asTexture file -name ($name+"_"+$fileName+"_file")`;
                string $place2dTexture = `shadingNode -asUtility place2dTexture -name ($name+"_"+$fileName+"_place2dTexture")`;
                $misc[size($misc)] = $place2dTexture;
                connectAttr -f ($place2dTexture+".coverage") ($file+".coverage");connectAttr -f ($place2dTexture+".translateFrame") ($file+".translateFrame");
                connectAttr -f ($place2dTexture+".rotateFrame") ($file+".rotateFrame");connectAttr -f ($place2dTexture+".mirrorU") ($file+".mirrorU");
                connectAttr -f ($place2dTexture+".mirrorV") ($file+".mirrorV");connectAttr -f ($place2dTexture+".stagger") ($file+".stagger");
                connectAttr -f ($place2dTexture+".wrapU") ($file+".wrapU");connectAttr -f ($place2dTexture+".wrapV") ($file+".wrapV");
                connectAttr -f ($place2dTexture+".repeatUV") ($file+".repeatUV");connectAttr -f ($place2dTexture+".offset") ($file+".offset");
                connectAttr -f ($place2dTexture+".rotateUV") ($file+".rotateUV");connectAttr -f ($place2dTexture+".noiseUV") ($file+".noiseUV");
                connectAttr -f ($place2dTexture+".vertexUvOne") ($file+".vertexUvOne");connectAttr -f ($place2dTexture+".vertexUvTwo") ($file+".vertexUvTwo");
                connectAttr -f ($place2dTexture+".vertexUvThree") ($file+".vertexUvThree");connectAttr -f ($place2dTexture+".vertexCameraOne") ($file+".vertexCameraOne");
                connectAttr ($place2dTexture+".outUV") ($file+".uv");connectAttr ($place2dTexture+".outUvFilterSize") ($file+".uvFilterSize");
                if ($i == 0){ $tensionFile = $file; }
                if ($i == 1){ $neutralDispFile = $file; }
                if ($i == 2){ $stretchDispFile = $file; }
                if ($i == 3){ $squashDispFile = $file; }
                if ($i == 4){ $bendInDispFile = $file; }
                if ($i == 5){ $bendOutDispFile = $file; }
                if ($i == 6){ $angleFile = $file; }
            }

            /* Set the files path */

            setAttr -type "string" ($tensionFile + ".fileTextureName") "";
            setAttr -type "string" ($neutralDispFile + ".fileTextureName") `textField -q -text fStretch_disp_neutralFile`;
            setAttr -type "string" ($stretchDispFile + ".fileTextureName") `textField -q -text fStretch_disp_stretchFile`;
            setAttr -type "string" ($squashDispFile + ".fileTextureName") `textField -q -text fStretch_disp_squashFile`;
            setAttr -type "string" ($bendInDispFile + ".fileTextureName") `textField -q -text fStretch_disp_bendInFile`;
            setAttr -type "string" ($bendOutDispFile + ".fileTextureName") `textField -q -text fStretch_disp_bendOutFile`;
            setAttr -type "string" ($angleFile + ".fileTextureName") "";

            /* Create remapColor nodes */
            $stretchRemap = `shadingNode -name ($name + "_stretch_remap") -asUtility remapColor`;
            $squashRemap = `shadingNode -name ($name + "_squash_remap") -asUtility remapColor`;
            $bendInRemap = `shadingNode -name ($name + "_bendIn_remap") -asUtility remapColor`;
            $bendOutRemap = `shadingNode -name ($name + "_bendOut_remap") -asUtility remapColor`;

            /* Create contrast nodes */
            $stretchContrast = `shadingNode -name ($name + "_stretch_contrast") -asUtility contrast`;
            $squashContrast = `shadingNode -name ($name + "_squash_contrast") -asUtility contrast`;
            $bendInContrast = `shadingNode -name ($name + "_bendIn_contrast") -asUtility contrast`;
            $bendOutContrast = `shadingNode -name ($name + "_bendOut_contrast") -asUtility contrast`;

            /* Create blendColors nodes */
            for ($i=0;$i<7;$i++){
                $blendColors[$i] = `shadingNode -name ($name + "_blendColors" + $i) -asUtility blendColors`;
            }

            /* Create plusMinusAverage nodes */
            $plusMinusAverage1 = `shadingNode -name ($name + "_plusMinusAverage1") -asUtility plusMinusAverage`;
            $plusMinusAverage2 = `shadingNode -name ($name + "_plusMinusAverage2") -asUtility plusMinusAverage`;

            /* Connect the nodes */

            connectAttr -f ($tensionFile + ".outColor") ($stretchRemap + ".color");
            connectAttr -f ($tensionFile + ".outColor") ($squashRemap + ".color");

            connectAttr -f ($angleFile + ".outColor") ($bendInRemap + ".color");
            connectAttr -f ($angleFile + ".outColor") ($bendOutRemap + ".color");

            connectAttr -f ($stretchRemap + ".outColorR") ($stretchContrast + ".valueX");
            connectAttr -f ($stretchRemap + ".outColorR") ($stretchContrast + ".valueY");
            connectAttr -f ($stretchRemap + ".outColorR") ($stretchContrast + ".valueZ");
            connectAttr -f ($squashRemap + ".outColorR") ($squashContrast + ".valueX");
            connectAttr -f ($squashRemap + ".outColorR") ($squashContrast + ".valueY");
            connectAttr -f ($squashRemap + ".outColorR") ($squashContrast + ".valueZ");
            connectAttr -f ($bendInRemap + ".outColorR") ($bendInContrast + ".valueX");
            connectAttr -f ($bendInRemap + ".outColorR") ($bendInContrast + ".valueY");
            connectAttr -f ($bendInRemap + ".outColorR") ($bendInContrast + ".valueZ");
            connectAttr -f ($bendOutRemap + ".outColorR") ($bendOutContrast + ".valueX");
            connectAttr -f ($bendOutRemap + ".outColorR") ($bendOutContrast + ".valueY");
            connectAttr -f ($bendOutRemap + ".outColorR") ($bendOutContrast + ".valueZ");

            connectAttr -f ($squashContrast + ".outValueX") ($blendColors[1] + ".blender");
            connectAttr -f ($squashDispFile + ".outColor") ($blendColors[0] + ".color1");
            setAttr ($blendColors[0] + ".color2") -type double3 0.5 0.5 0.5 ;

            connectAttr -f ($blendColors[0] + ".output") ($blendColors[1] + ".color2");
            connectAttr -f ($stretchDispFile + ".outColor") ($blendColors[1] + ".color1");
            connectAttr -f ($stretchContrast + ".outValueX") ($blendColors[0] + ".blender");

            connectAttr -f ($blendColors[1] + ".output") ($blendColors[2] + ".color2");
            connectAttr -f ($bendOutDispFile + ".outColor") ($blendColors[2] + ".color1");
            connectAttr -f ($bendInContrast + ".outValueX") ($blendColors[3] + ".blender");

            connectAttr -f ($blendColors[2] + ".output") ($blendColors[3] + ".color2");
            connectAttr -f ($bendInDispFile + ".outColor") ($blendColors[3] + ".color1");
            connectAttr -f ($bendOutContrast + ".outValueX") ($blendColors[2] + ".blender");

            connectAttr -f ($blendColors[3] + ".output") ($blendColors[4] + ".color2");
            connectAttr -f ($blendColors[1] + ".output") ($blendColors[4] + ".color1");

            connectAttr -f ($stretchContrast + ".outValueX") ($plusMinusAverage1 + ".input1D[1]");
            connectAttr -f ($squashContrast + ".outValueX") ($plusMinusAverage1 + ".input1D[0]");

            connectAttr -f ($plusMinusAverage1 + ".output1D") ($blendColors[4] + ".blender");

            connectAttr -f ($blendColors[4] + ".output") ($blendColors[5] + ".color2");
            connectAttr -f ($blendColors[3] + ".output") ($blendColors[5] + ".color1");
            setAttr ($blendColors[5] + ".blender") 0.5;

            connectAttr -f ($blendColors[5] + ".output") ($blendColors[6] + ".color1");
            connectAttr -f ($neutralDispFile + ".outColor") ($blendColors[6] + ".color2");

            connectAttr -f ($stretchContrast + ".outValueX") ($plusMinusAverage2 + ".input1D[1]");
            connectAttr -f ($squashContrast + ".outValueX") ($plusMinusAverage2 + ".input1D[0]");
            connectAttr -f ($bendInContrast + ".outValueX") ($plusMinusAverage2 + ".input1D[3]");
            connectAttr -f ($bendOutContrast + ".outValueX") ($plusMinusAverage2 + ".input1D[2]");

            connectAttr -f ($plusMinusAverage2 + ".output1D") ($blendColors[6] + ".blender");

            setAttr ($bendOutRemap+".inputMin") 0.5;
            setAttr ($bendInRemap+".inputMin") 0.5;
            setAttr ($bendInRemap+".inputMax") 0;

            setAttr ($squashRemap+".inputMin") 0.5;
            setAttr ($stretchRemap+".inputMin") 0.5;
            setAttr ($stretchRemap+".inputMax") 0;

            /* Create displacement node */

            $displacementNode = `shadingNode -name ($name + "_displacementShader") -asShader displacementShader`;
            connectAttr -f ($blendColors[6] + ".outputR") ($displacementNode + ".displacement");
            connectAttr -f ($displacementNode + ".displacement") (`textField -q -text fStretch_disp_shadingGroup` + ".displacementShader");

            /* Create Container */

            select -r $tensionFile $neutralDispFile $stretchDispFile $squashDispFile $bendInDispFile $bendOutDispFile $angleFile $stretchRemap $squashRemap $bendInRemap $bendOutRemap $stretchContrast
            $squashContrast $bendInContrast $bendOutContrast $blendColors $plusMinusAverage1 $plusMinusAverage2 $misc;

            container -name ($name + "_displacementNetwork_asset") -includeShapes -includeTransform -force -addNode `ls -sl`;
        }
        else if (`checkBox -q -v fStretch_disp_tensionBased`) {
            /* TENSION DISPLACEMENT */

            /* Create file nodes */
            int $i;
            for ($i=0; $i<=3; $i++){
                string $fileName;
                if ($i == 0){ $fileName = "tension"; }
                if ($i == 1){ $fileName = "neutralDisp"; }
                if ($i == 2){ $fileName = "stretchDisp"; }
                if ($i == 3){ $fileName = "squashDisp"; }
                string $file = `shadingNode -asTexture file -name ($name+"_"+$fileName+"_file")`;
                string $place2dTexture = `shadingNode -asUtility place2dTexture -name ($name+"_"+$fileName+"_place2dTexture")`;
                $misc[size($misc)] = $place2dTexture;
                connectAttr -f ($place2dTexture+".coverage") ($file+".coverage");connectAttr -f ($place2dTexture+".translateFrame") ($file+".translateFrame");
                connectAttr -f ($place2dTexture+".rotateFrame") ($file+".rotateFrame");connectAttr -f ($place2dTexture+".mirrorU") ($file+".mirrorU");
                connectAttr -f ($place2dTexture+".mirrorV") ($file+".mirrorV");connectAttr -f ($place2dTexture+".stagger") ($file+".stagger");
                connectAttr -f ($place2dTexture+".wrapU") ($file+".wrapU");connectAttr -f ($place2dTexture+".wrapV") ($file+".wrapV");
                connectAttr -f ($place2dTexture+".repeatUV") ($file+".repeatUV");connectAttr -f ($place2dTexture+".offset") ($file+".offset");
                connectAttr -f ($place2dTexture+".rotateUV") ($file+".rotateUV");connectAttr -f ($place2dTexture+".noiseUV") ($file+".noiseUV");
                connectAttr -f ($place2dTexture+".vertexUvOne") ($file+".vertexUvOne");connectAttr -f ($place2dTexture+".vertexUvTwo") ($file+".vertexUvTwo");
                connectAttr -f ($place2dTexture+".vertexUvThree") ($file+".vertexUvThree");connectAttr -f ($place2dTexture+".vertexCameraOne") ($file+".vertexCameraOne");
                connectAttr ($place2dTexture+".outUV") ($file+".uv");connectAttr ($place2dTexture+".outUvFilterSize") ($file+".uvFilterSize");
                if ($i == 0){ $tensionFile = $file; }
                if ($i == 1){ $neutralDispFile = $file; }
                if ($i == 2){ $stretchDispFile = $file; }
                if ($i == 3){ $squashDispFile = $file; }
            }

            /* Set the files path */

            setAttr -type "string" ($tensionFile + ".fileTextureName") "";
            setAttr -type "string" ($neutralDispFile + ".fileTextureName") `textField -q -text fStretch_disp_neutralFile`;
            setAttr -type "string" ($stretchDispFile + ".fileTextureName") `textField -q -text fStretch_disp_stretchFile`;
            setAttr -type "string" ($squashDispFile + ".fileTextureName") `textField -q -text fStretch_disp_squashFile`;

            /* Create remapColor nodes */
            $stretchRemap = `shadingNode -name ($name + "_stretch_remap") -asUtility remapColor`;
            $squashRemap = `shadingNode -name ($name + "_squash_remap") -asUtility remapColor`;

            /* Create contrast nodes */
            $stretchContrast = `shadingNode -name ($name + "_stretch_contrast") -asUtility contrast`;
            $squashContrast = `shadingNode -name ($name + "_squash_contrast") -asUtility contrast`;

            /* Create blendColors nodes */
            for ($i=0;$i<2;$i++){
                $blendColors[$i] = `shadingNode -name ($name + "_blendColors" + $i) -asUtility blendColors`;
            }

            /* Connect the nodes */

            connectAttr -f ($tensionFile + ".outColor") ($stretchRemap + ".color");
            connectAttr -f ($tensionFile + ".outColor") ($squashRemap + ".color");

            connectAttr -f ($stretchRemap + ".outColorR") ($stretchContrast + ".valueX");
            connectAttr -f ($stretchRemap + ".outColorR") ($stretchContrast + ".valueY");
            connectAttr -f ($stretchRemap + ".outColorR") ($stretchContrast + ".valueZ");
            connectAttr -f ($squashRemap + ".outColorR") ($squashContrast + ".valueX");
            connectAttr -f ($squashRemap + ".outColorR") ($squashContrast + ".valueY");
            connectAttr -f ($squashRemap + ".outColorR") ($squashContrast + ".valueZ");

            connectAttr -f ($squashContrast + ".outValueX") ($blendColors[1] + ".blender");
            connectAttr -f ($squashDispFile + ".outColor") ($blendColors[0] + ".color1");
            setAttr ($blendColors[0] + ".color2") -type double3 0.5 0.5 0.5 ;

            connectAttr -f ($blendColors[0] + ".output") ($blendColors[1] + ".color2");
            connectAttr -f ($stretchDispFile + ".outColor") ($blendColors[1] + ".color1");
            connectAttr -f ($stretchContrast + ".outValueX") ($blendColors[0] + ".blender");

            connectAttr -f ($neutralDispFile + ".outColor") ($blendColors[0] + ".color2");

            setAttr ($squashRemap+".inputMin") 0.5;
            setAttr ($stretchRemap+".inputMin") 0.5;
            setAttr ($stretchRemap+".inputMax") 0;

            /* Create displacement node */

            $displacementNode = `shadingNode -name ($name + "_displacementShader") -asShader displacementShader`;
            connectAttr -f ($blendColors[1] + ".outputR") ($displacementNode + ".displacement");
            connectAttr -f ($displacementNode + ".displacement") (`textField -q -text fStretch_disp_shadingGroup` + ".displacementShader");

            /* Create Container */

            select -r $tensionFile $neutralDispFile $stretchDispFile $squashDispFile $stretchRemap $squashRemap $stretchContrast
            $squashContrast $blendColors $misc;

            container -name ($name + "_displacementNetwork_asset") -includeShapes -includeTransform -force -addNode `ls -sl`;
        };

        else if (`checkBox -q -v fStretch_disp_angleBased`) {
            /* ANGLE DISPLACEMENT */

            /* Create file nodes */
            int $i;
            for ($i=0; $i<=3; $i++){
                string $fileName;
                if ($i == 0){ $fileName = "angle"; }
                if ($i == 1){ $fileName = "neutralDisp"; }
                if ($i == 2){ $fileName = "bendInDisp"; }
                if ($i == 3){ $fileName = "bendOutDisp"; }
                string $file = `shadingNode -asTexture file -name ($name+"_"+$fileName+"_file")`;
                string $place2dTexture = `shadingNode -asUtility place2dTexture -name ($name+"_"+$fileName+"_place2dTexture")`;
                $misc[size($misc)] = $place2dTexture;
                connectAttr -f ($place2dTexture+".coverage") ($file+".coverage");connectAttr -f ($place2dTexture+".translateFrame") ($file+".translateFrame");
                connectAttr -f ($place2dTexture+".rotateFrame") ($file+".rotateFrame");connectAttr -f ($place2dTexture+".mirrorU") ($file+".mirrorU");
                connectAttr -f ($place2dTexture+".mirrorV") ($file+".mirrorV");connectAttr -f ($place2dTexture+".stagger") ($file+".stagger");
                connectAttr -f ($place2dTexture+".wrapU") ($file+".wrapU");connectAttr -f ($place2dTexture+".wrapV") ($file+".wrapV");
                connectAttr -f ($place2dTexture+".repeatUV") ($file+".repeatUV");connectAttr -f ($place2dTexture+".offset") ($file+".offset");
                connectAttr -f ($place2dTexture+".rotateUV") ($file+".rotateUV");connectAttr -f ($place2dTexture+".noiseUV") ($file+".noiseUV");
                connectAttr -f ($place2dTexture+".vertexUvOne") ($file+".vertexUvOne");connectAttr -f ($place2dTexture+".vertexUvTwo") ($file+".vertexUvTwo");
                connectAttr -f ($place2dTexture+".vertexUvThree") ($file+".vertexUvThree");connectAttr -f ($place2dTexture+".vertexCameraOne") ($file+".vertexCameraOne");
                connectAttr ($place2dTexture+".outUV") ($file+".uv");connectAttr ($place2dTexture+".outUvFilterSize") ($file+".uvFilterSize");
                if ($i == 0){ $angleFile = $file; }
                if ($i == 1){ $neutralDispFile = $file; }
                if ($i == 2){ $bendInDispFile = $file; }
                if ($i == 3){ $bendOutDispFile = $file; }
            }

            /* Set the files path */

            setAttr -type "string" ($angleFile + ".fileTextureName") "";
            setAttr -type "string" ($neutralDispFile + ".fileTextureName") `textField -q -text fStretch_disp_neutralFile`;
            setAttr -type "string" ($bendInDispFile + ".fileTextureName") `textField -q -text fStretch_disp_bendInFile`;
            setAttr -type "string" ($bendOutDispFile + ".fileTextureName") `textField -q -text fStretch_disp_bendOutFile`;

            /* Create remapColor nodes */
            $bendInRemap = `shadingNode -name ($name + "_bendIn_remap") -asUtility remapColor`;
            $bendOutRemap = `shadingNode -name ($name + "_bendOut_remap") -asUtility remapColor`;

            /* Create contrast nodes */
            $bendInContrast = `shadingNode -name ($name + "_bendIn_contrast") -asUtility contrast`;
            $bendOutContrast = `shadingNode -name ($name + "_bendOut_contrast") -asUtility contrast`;

            /* Create blendColors nodes */
            for ($i=0;$i<2;$i++){
                $blendColors[$i] = `shadingNode -name ($name + "_blendColors" + $i) -asUtility blendColors`;
            }

            /* Connect the nodes */

            connectAttr -f ($angleFile + ".outColor") ($bendInRemap + ".color");
            connectAttr -f ($angleFile + ".outColor") ($bendOutRemap + ".color");

            connectAttr -f ($bendInRemap + ".outColorR") ($bendInContrast + ".valueX");
            connectAttr -f ($bendInRemap + ".outColorR") ($bendInContrast + ".valueY");
            connectAttr -f ($bendInRemap + ".outColorR") ($bendInContrast + ".valueZ");
            connectAttr -f ($bendOutRemap + ".outColorR") ($bendOutContrast + ".valueX");
            connectAttr -f ($bendOutRemap + ".outColorR") ($bendOutContrast + ".valueY");
            connectAttr -f ($bendOutRemap + ".outColorR") ($bendOutContrast + ".valueZ");

            connectAttr -f ($bendOutContrast + ".outValueX") ($blendColors[1] + ".blender");
            connectAttr -f ($bendOutDispFile + ".outColor") ($blendColors[1] + ".color1");
            setAttr ($blendColors[0] + ".color2") -type double3 0.5 0.5 0.5 ;

            connectAttr -f ($blendColors[0] + ".output") ($blendColors[1] + ".color2");
            connectAttr -f ($bendInDispFile + ".outColor") ($blendColors[0] + ".color1");
            connectAttr -f ($bendInContrast + ".outValueX") ($blendColors[0] + ".blender");

            connectAttr -f ($neutralDispFile + ".outColor") ($blendColors[0] + ".color2");

            setAttr ($bendOutRemap+".inputMin") 0.5;
            setAttr ($bendInRemap+".inputMin") 0.5;
            setAttr ($bendInRemap+".inputMax") 0;

            /* Create displacement node */

            $displacementNode = `shadingNode -name ($name + "_displacementShader") -asShader displacementShader`;
            connectAttr -f ($blendColors[1] + ".outputR") ($displacementNode + ".displacement");
            connectAttr -f ($displacementNode + ".displacement") (`textField -q -text fStretch_disp_shadingGroup` + ".displacementShader");

            /* Create Container */

            select -r $angleFile $neutralDispFile $bendInDispFile $bendOutDispFile $bendInRemap $bendOutRemap $bendInContrast
            $bendOutContrast $blendColors $misc;

            container -name ($name + "_displacementNetwork_asset") -includeShapes -includeTransform -force -addNode `ls -sl`;
        }

        /* Create pre/post mel scripts */

        if (`checkBox -q -v fStretch_disp_melScripts`){

            string $mode;
            if (`checkBox -q -v fStretch_disp_tensionBased` && `checkBox -q -v fStretch_disp_angleBased`) { $mode = "both"; }
            else if (`checkBox -q -v fStretch_disp_tensionBased`) { $mode = "tension"; }
            else if (`checkBox -q -v fStretch_disp_angleBased`) { $mode = "angle"; }

            string $mesh = `textField -q -text fStretch_disp_mesh`;
            string $fStretchNode = `textField -q -text fStretch_disp_node`;
            string $exportValue = `optionMenu -q -v fStretch_disp_exportValue`;
            string $imageFormat = `optionMenu -q -v fStretch_disp_imageFormat`;
            int $mapSizeX = `intField -q -value fStretch_disp_mapSizeX`;
            int $mapSizeY = `intField -q -value fStretch_disp_mapSizeY`;
            string $tensionName = `textField -q -text fStretch_disp_tensionFileName`;
            string $angleName = `textField -q -text fStretch_disp_angleFileName`;
            string $path = `textField -q -text fStretch_disp_filePath`;
            int $padding = `intField -q -v fStretch_disp_padding`;

            if (`checkBox -q -v fStretch_disp_overwriteMelScripts`) {
                setAttr -type "string" defaultRenderGlobals.preMel ("fStretch_displacement_preRenderMel(""+$mode+"", ""+$mesh+"", ""+$fStretchNode+"", ""+$exportValue+"", ""+$imageFormat+"", ""+$mapSizeX+"", ""+$mapSizeY+"", ""+$tensionName+"", ""+$angleName+"", ""+$path+"", ""+$tensionFile+"", ""+$angleFile+"", ""+$padding+""); " + `getAttr defaultRenderGlobals.preMel`);
                if (`checkBox -q -v fStretch_disp_deleteFiles`){ setAttr -type "string" defaultRenderGlobals.postMel ("fStretch_displacement_postRenderMel(""+$mode+"", ""+$imageFormat+"", ""+$tensionName+"", ""+$angleName+"", ""+$path+"", ""+$tensionFile+"", ""+$angleFile+"", ""+$padding+""); " + `getAttr defaultRenderGlobals.postMel`); }
            } else {
                setAttr -type "string" defaultRenderGlobals.preMel ("fStretch_displacement_preRenderMel(""+$mode+"", ""+$mesh+"", ""+$fStretchNode+"", ""+$exportValue+"", ""+$imageFormat+"", ""+$mapSizeX+"", ""+$mapSizeY+"", ""+$tensionName+"", ""+$angleName+"", ""+$path+"", ""+$tensionFile+"", ""+$angleFile+"", ""+$padding+""); ");
                if (`checkBox -q -v fStretch_disp_deleteFiles`){ setAttr -type "string" defaultRenderGlobals.postMel ("fStretch_displacement_postRenderMel(""+$mode+"", ""+$imageFormat+"", ""+$tensionName+"", ""+$angleName+"", ""+$path+"", ""+$tensionFile+"", ""+$angleFile+"", ""+$padding+""); "); }
            }

            /* gray scale warning */

            fStretch_window displacementColorRamp;

            /* gray scale tension ramp */

            if (`checkBox -q -v fStretch_disp_tensionBased`) {
                for ($i=20; $i>=0; $i--){
                    catchQuiet (`removeMultiInstance -break true ($fStretchNode + ".tensionColorRamp[" + $i + "]")`);
                    refreshAE;
                }
                setAttr ($fStretchNode + ".tensionColorRamp[0].tensionColorRamp_Position") 1;
                setAttr ($fStretchNode + ".tensionColorRamp[0].tensionColorRamp_Color") -type double3 1 1 1 ;
				setAttr ($fStretchNode + ".tensionColorRamp[0].tensionColorRamp_Interp") 3;
                setAttr ($fStretchNode + ".tensionColorRamp[1].tensionColorRamp_Position") 0;
                setAttr ($fStretchNode + ".tensionColorRamp[1].tensionColorRamp_Color") -type double3 0 0 0 ;
				setAttr ($fStretchNode + ".tensionColorRamp[1].tensionColorRamp_Interp") 3;
            }

            /* gray scale angle ramp */

            if (`checkBox -q -v fStretch_disp_angleBased`) {
                for ($i=20; $i>=0; $i--){
                    catchQuiet (`removeMultiInstance -break true ($fStretchNode + ".angleColorRamp[" + $i + "]")`);
                    refreshAE;
                }
                setAttr ($fStretchNode + ".angleColorRamp[0].angleColorRamp_Position") 1;
                setAttr ($fStretchNode + ".angleColorRamp[0].angleColorRamp_Color") -type double3 1 1 1 ;
				setAttr ($fStretchNode + ".angleColorRamp[0].angleColorRamp_Interp") 3;
                setAttr ($fStretchNode + ".angleColorRamp[1].angleColorRamp_Position") 0;
                setAttr ($fStretchNode + ".angleColorRamp[1].angleColorRamp_Color") -type double3 0 0 0 ;
				setAttr ($fStretchNode + ".angleColorRamp[1].angleColorRamp_Interp") 3;
            }
        }

    break;

    default:

    break;
    }
}

/*######################### Pre/Post render MEL script proc ##########################*/

global proc fStretch_displacement_preRenderMel(string $mode, string $mesh, string $fStretchNode,string $exportValue,string $imageFormat,int $mapSizeX, int $mapSizeY, string $tensionName, string $angleName, string $path, string $tensionFileNode, string $angleFileNode, int $padding){

	if (!`about -batch`) {
		string $oldSel[] = `ls -sl`;
	
		int $oldDrawCPVValue = `getAttr ($fStretchNode + ".drawColorPerVertex")`;
		int $oldColorDisplayValue= `getAttr ($fStretchNode + ".colorDisplay")`;
	
		select -r $mesh;
	
		/* Padding */
		string $cTime = `currentTime -q`;
		string $buffer[];
		$numTokens = `tokenize $cTime "." $buffer`;
	
		if (($padding - `size($buffer[0])`) >= 0) { $padding = ($padding - `size($buffer[0])`); } else { $padding = 0; }
		int $p; string $paddingZeros = "";
		for ($p=0; $p<$padding; $p++){
			$paddingZeros = ($paddingZeros + "0");
		}
	
		/* Tension Based */
		if ( ($mode == "tension") || ($mode == "both") ){
	
			setAttr ($fStretchNode + ".drawColorPerVertex") 1;
			setAttr ($fStretchNode + ".colorDisplay") 0;
	
			PaintVertexColorToolOptions;
			artSetToolAndSelectAttr( "artAttrCtx", "mesh." + $mesh +".vertexColorRGB" );
			artExportAttrMapCB ("artAttrPaintVertexCtx -efm " + $exportValue + " -eft " + $imageFormat + " -fsx " + $mapSizeX + " -fsy " + $mapSizeY) ($path + $tensionName + "." + $paddingZeros + `currentTime -q` + "." + $imageFormat) "map";
			setAttr -type "string" ($tensionFileNode + ".fileTextureName") ($path + $tensionName + "." + $paddingZeros + `currentTime -q` + "." + $imageFormat);
			/*dgdirty $tensionFileNode;*/
		}
	
		/* Angle Based */
		if ( ($mode == "angle") || ($mode == "both") ){
	
			setAttr ($fStretchNode + ".drawColorPerVertex") 1;
			setAttr ($fStretchNode + ".colorDisplay") 1;
	
			PaintVertexColorToolOptions;
			artSetToolAndSelectAttr( "artAttrCtx", "mesh." + $mesh +".vertexColorRGB" );
			artExportAttrMapCB ("artAttrPaintVertexCtx -efm " + $exportValue + " -eft " + $imageFormat + " -fsx " + $mapSizeX + " -fsy " + $mapSizeY) ($path + $angleName + "." + $paddingZeros + `currentTime -q` + "." + $imageFormat) "map";
			setAttr -type "string" ($angleFileNode + ".fileTextureName") ($path + $angleName + "." + $paddingZeros + `currentTime -q` + "." + $imageFormat);
			/*dgdirty $angleFileNode;*/
		}
	
		setAttr ($fStretchNode + ".colorDisplay") $oldColorDisplayValue;
		setAttr ($fStretchNode + ".drawColorPerVertex") $oldDrawCPVValue;
		setToolTo nurbsSelect;
	
		select -r $oldSel;
	}
}

global proc fStretch_displacement_postRenderMel(string $mode, string $imageFormat, string $tensionName, string $angleName, string $path, string $tensionFileNode, string $angleFileNode, int $padding){
	if (!`about -batch`) {
		/* Padding */
		string $cTime = `currentTime -q`;
		string $buffer[];
		$numTokens = `tokenize $cTime "." $buffer`;
	
		if (($padding - `size($buffer[0])`) >= 0) { $padding = ($padding - `size($buffer[0])`); } else { $padding = 0; }
		int $p; string $paddingZeros = "";
		for ($p=0; $p<$padding; $p++){
			$paddingZeros = ($paddingZeros + "0");
		}
	
		/* Delete files */
	
		if ( ($mode == "tension") || ($mode == "both") ){
			setAttr -type "string" ($tensionFileNode + ".fileTextureName") "";
			sysFile -delete ($path + $tensionName + "." + $paddingZeros + `currentTime -q` + "." + $imageFormat);
		}
		if ( ($mode == "angle") || ($mode == "both") ){
			setAttr -type "string" ($angleFileNode + ".fileTextureName") "";
			sysFile -delete ($path + $angleName + "." + $paddingZeros + `currentTime -q` + "." + $imageFormat);
		}
	}
}
